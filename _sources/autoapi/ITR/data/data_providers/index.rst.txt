:py:mod:`ITR.data.data_providers`
=================================

.. py:module:: ITR.data.data_providers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ITR.data.data_providers.CompanyDataProvider
   ITR.data.data_providers.ProductionBenchmarkDataProvider
   ITR.data.data_providers.IntensityBenchmarkDataProvider




.. py:class:: CompanyDataProvider(**kwargs)

   Bases: :py:obj:`abc.ABC`

   Company data provider super class.
   Data container for company specific data. It expects both Fundamental (e.g. Company revenue, marktetcap etc) and
   emission and target data per company.

   Initialized CompanyDataProvider is required when setting up a data warehouse instance.

   .. py:method:: get_company_data(self, company_ids: List[str]) -> List[ITR.interfaces.ICompanyData]
      :abstractmethod:

      Get all relevant data for a list of company ids (ISIN). This method should return a list of ICompanyData
      instances.

      :param company_ids: A list of company IDs (ISINs)
      :return: A list containing the company data


   .. py:method:: get_value(self, company_ids: List[str], variable_name: str) -> pandas.Series
      :abstractmethod:

      Gets the value of a variable for a list of companies idss
      :param company_ids: list of company ids
      :param variable_name: variable name of the projected feature
      :return: series of values


   .. py:method:: get_company_intensity_and_production_at_base_year(self, company_ids: List[str]) -> pandas.DataFrame
      :abstractmethod:

      Get the emission intensity and the production for a list of companies at the base year.
      :param: company_ids: list of company ids
      :return: DataFrame the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.GHG_S1S2, ColumnsConfig.BASE_EI, ColumnsConfig.SECTOR and
      ColumnsConfig.REGION


   .. py:method:: get_company_projected_trajectories(self, company_ids: List[str]) -> pandas.DataFrame
      :abstractmethod:

      Gets the emission intensities for a list of companies
      :param company_ids: list of company ids
      :return: dataframe of projected intensity trajectories for each company in company_ids


   .. py:method:: get_company_projected_targets(self, company_ids: List[str]) -> pandas.DataFrame
      :abstractmethod:

      Gets the projected targets for a list of companies
      :param company_ids: list of company ids
      :return: dataframe of projected intensity targets for each company in company_ids



.. py:class:: ProductionBenchmarkDataProvider(**kwargs)

   Bases: :py:obj:`abc.ABC`

   Production projecton data provider super class.

   This Data Container contains Production data on benchmark level. Data has a regions and sector indices.
   Initialized ProductionBenchmarkDataProvider is required when setting up a data warehouse instance.

   .. py:method:: get_company_projected_production(self, ghg_scope12: pandas.DataFrame) -> pandas.DataFrame
      :abstractmethod:

      get the projected productions for all companies in ghg_scope12
      :param ghg_scope12: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.GHG_S1S2, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: Dataframe of projected productions for [base_year - base_year + 50]


   .. py:method:: get_benchmark_projections(self, company_secor_region_info: pandas.DataFrame) -> pandas.DataFrame
      :abstractmethod:

      get the sector emissions for a list of companies.
      If there is no data for the sector, then it will be replaced by the global value
      :param company_secor_region_info: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: A DataFrame with company and intensity benchmarks per calendar year per row



.. py:class:: IntensityBenchmarkDataProvider(benchmark_temperature: pint.Quantity[delta_degC], benchmark_global_budget: pint.Quantity[CO2], is_AFOLU_included: bool, **kwargs)

   Bases: :py:obj:`abc.ABC`

   Production intensity data provider super class.
   This Data Container contains emission intensity data on benchmark level. Data has a regions and sector indices.
   Initialized IntensityBenchmarkDataProvider is required when setting up a data warehouse instance.

   .. py:attribute:: AFOLU_CORRECTION_FACTOR
      :annotation: = 0.76

      

   .. py:method:: is_AFOLU_included(self) -> bool
      :property:

      :return: if AFOLU is included in the benchmarks global budget


   .. py:method:: benchmark_temperature(self) -> pint.Quantity[delta_degC]
      :property:

      :return: assumed temperature for the benchmark. for OECM 1.5C for example


   .. py:method:: benchmark_global_budget(self) -> pint.Quantity[CO2]
      :property:

      :return: Benchmark provider assumed global budget. if AFOLU is not included global budget is divided by 0.76


   .. py:method:: _get_intensity_benchmarks(self, company_sector_region_info: pandas.DataFrame) -> pandas.DataFrame
      :abstractmethod:

      returns a Dataframe with intensity benchmarks per company_id given a region and sector.
      :param company_sector_region_info: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: A DataFrame with company and intensity benchmarks per calendar year per row


   .. py:method:: get_SDA_intensity_benchmarks(self, company_sector_region_info: pandas.DataFrame) -> pandas.DataFrame
      :abstractmethod:

      returns a Dataframe with intensity benchmarks per company_id given a region and sector.
      :param company_sector_region_info: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: A DataFrame with company and intensity benchmarks per calendar year per row



