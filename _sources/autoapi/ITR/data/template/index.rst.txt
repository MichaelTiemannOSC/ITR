:py:mod:`ITR.data.template`
===========================

.. py:module:: ITR.data.template


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ITR.data.template.TemplateProviderCompany



Functions
~~~~~~~~~

.. autoapisummary::

   ITR.data.template.ITR_country_to_region



Attributes
~~~~~~~~~~

.. autoapisummary::

   ITR.data.template.ureg
   ITR.data.template.Q_
   ITR.data.template.pkg_root
   ITR.data.template.df_country_regions
   ITR.data.template.logger


.. py:data:: ureg
   

   

.. py:data:: Q_
   

   

.. py:data:: pkg_root
   

   

.. py:data:: df_country_regions
   

   

.. py:data:: logger
   

   

.. py:function:: ITR_country_to_region(country)


.. py:class:: TemplateProviderCompany(excel_path: str, column_config: Type[ITR.configs.ColumnsConfig] = ColumnsConfig, tempscore_config: Type[ITR.configs.TemperatureScoreConfig] = TemperatureScoreConfig, projection_controls: Type[ITR.interfaces.ProjectionControls] = ProjectionControls)

   Bases: :py:obj:`ITR.data.base_providers.BaseCompanyDataProvider`

   Data provider skeleton for CSV files. This class serves primarily for testing purposes only!
   As of Feb 2022, we are testing!!

   :param excel_path: A path to the Excel file with the company data
   :param column_config: An optional ColumnsConfig object containing relevant variable names
   :param tempscore_config: An optional TemperatureScoreConfig object containing temperature scoring settings

   .. py:method:: _convert_from_template_company_data(self, excel_path: str) -> List[ITR.interfaces.ICompanyData]

      Converts the Excel template to list of ICompanyData objects. All dataprovider features will be inhereted from
      Base
      :param excel_path: file path to excel file
      :return: List of ICompanyData objects


   .. py:method:: _validate_target_data(self, target_data: pandas.DataFrame) -> pandas.DataFrame

      Performs checks on the supplied target data. Some values are put in to make the tool function.
      :param target_data:
      :return:


   .. py:method:: _convert_series_to_IProjections(self, projections: pandas.Series) -> [ITR.interfaces.IProjection]

      Converts a Pandas Series to a list of IProjection
      :param projections: Pandas Series with years as indices
      :return: List of IProjection objects


   .. py:method:: _company_df_to_model(self, df_fundamentals: pandas.DataFrame, df_target_data: pandas.DataFrame, df_historic_data: pandas.DataFrame) -> List[ITR.interfaces.ICompanyData]

      transforms target Dataframe into list of ICompanyData instances.
      We don't necessarily have enough info to do target projections at this stage.

      :param df_fundamentals: pandas Dataframe with fundamental data
      :param df_target_data: pandas Dataframe with target data
      :param df_historic_data: pandas Dataframe with historic emissions, intensity, and production information
      :return: A list containing the ICompanyData objects


   .. py:method:: _np_sum(g)


   .. py:method:: _get_projection(self, company_ids: List[str], projections: pandas.DataFrame, production_metric: pandas.DataFrame) -> pandas.DataFrame

      get the projected emission intensities for list of companies
      :param company_ids: list of company ids
      :param projections: Dataframe with listed projections per company
      :param production_metric: Dataframe with production_metric per company
      :return: series of projected emission intensities


   .. py:method:: _convert_target_data(self, target_data: pandas.DataFrame) -> List[ITR.interfaces.ITargetData]

      :param historic: historic production, emission and emission intensity data for a company
      :return: IHistoricData Pydantic object


   .. py:method:: _get_historic_data(self, company_ids: List[str], historic_data: pandas.DataFrame) -> pandas.DataFrame

      get the historic data for list of companies
      :param company_ids: list of company ids
      :param historic_data: Dataframe Productions, Emissions, and Emission Intensities mixed together
      :return: historic data with unit attributes added on a per-element basis


   .. py:method:: _convert_historic_data(self, historic: pandas.DataFrame) -> ITR.interfaces.IHistoricData

      :param historic: historic production, emission and emission intensity data for a company (already unitized)
      :return: IHistoricData Pydantic object


   .. py:method:: _convert_to_historic_emissions(self, emissions: pandas.DataFrame) -> Optional[ITR.interfaces.IHistoricEmissionsScopes]

      :param emissions: historic emissions data for a company
      :return: List of historic emissions per scope, or None if no data are provided


   .. py:method:: _convert_to_historic_productions(self, productions: pandas.DataFrame) -> Optional[List[ITR.interfaces.IProductionRealization]]

      :param productions: historic production data for a company
      :return: A list containing historic productions, or None if no data are provided


   .. py:method:: _convert_to_historic_ei(self, intensities: pandas.DataFrame) -> Optional[ITR.interfaces.IHistoricEIScopes]

      :param intensities: historic emission intensity data for a company
      :return: A list of historic emission intensities per scope, or None if no data are provided



