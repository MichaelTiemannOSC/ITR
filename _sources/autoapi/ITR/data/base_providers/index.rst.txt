:py:mod:`ITR.data.base_providers`
=================================

.. py:module:: ITR.data.base_providers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ITR.data.base_providers.BaseProviderProductionBenchmark
   ITR.data.base_providers.BaseProviderIntensityBenchmark
   ITR.data.base_providers.BaseCompanyDataProvider
   ITR.data.base_providers.EITrajectoryProjector
   ITR.data.base_providers.EITargetProjector




Attributes
~~~~~~~~~~

.. autoapisummary::

   ITR.data.base_providers.logger


.. py:data:: logger
   

   

.. py:class:: BaseProviderProductionBenchmark(production_benchmarks: ITR.interfaces.IProductionBenchmarkScopes, column_config: Type[ITR.configs.ColumnsConfig] = ColumnsConfig, tempscore_config: Type[ITR.configs.TemperatureScoreConfig] = TemperatureScoreConfig)

   Bases: :py:obj:`ITR.data.data_providers.ProductionBenchmarkDataProvider`

   .. py:method:: _convert_benchmark_to_series(self, benchmark: ITR.interfaces.IBenchmark) -> pandas.Series

      extracts the company projected intensity or production targets for a given scope
      :param scope: a scope
      :return: pd.Series


   .. py:method:: _get_projected_production(self, scope: ITR.interfaces.EScope = EScope.S1S2) -> pandas.DataFrame

      Converts IProductionBenchmarkScopes into dataframe for a scope
      :param scope: a scope
      :return: pd.DataFrame


   .. py:method:: get_company_projected_production(self, company_sector_region_info: pandas.DataFrame) -> pandas.DataFrame

      get the projected productions for list of companies in ghg_scope12
      :param company_sector_region_info: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.GHG_SCOPE12, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: DataFrame of projected productions for [base_year - base_year + 50]


   .. py:method:: get_benchmark_projections(self, company_sector_region_info: pandas.DataFrame, scope: ITR.interfaces.EScope = EScope.S1S2) -> pandas.DataFrame

      Overrides subclass method
      returns a Dataframe with production benchmarks per company_id given a region and sector.
      :param company_sector_region_info: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :param scope: a scope
      :return: A DataFrame with company and intensity benchmarks per calendar year per row



.. py:class:: BaseProviderIntensityBenchmark(EI_benchmarks: ITR.interfaces.IEIBenchmarkScopes, column_config: Type[ITR.configs.ColumnsConfig] = ColumnsConfig, tempscore_config: Type[ITR.configs.TemperatureScoreConfig] = TemperatureScoreConfig)

   Bases: :py:obj:`ITR.data.data_providers.IntensityBenchmarkDataProvider`

   .. py:method:: get_SDA_intensity_benchmarks(self, company_info_at_base_year: pandas.DataFrame) -> pandas.DataFrame

      Overrides subclass method
      returns a Dataframe with intensity benchmarks per company_id given a region and sector.
      :param company_info_at_base_year: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.BASE_EI, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: A DataFrame with company and SDA intensity benchmarks per calendar year per row


   .. py:method:: _get_decarbonizations_paths(self, intensity_benchmarks: pandas.DataFrame) -> pandas.DataFrame

      Overrides subclass method
      Returns a DataFrame with the projected decarbonization paths for the supplied companies in intensity_benchmarks.
      :param: A DataFrame with company and intensity benchmarks per calendar year per row
      :return: A pd.DataFrame with company and decarbonisation path s per calendar year per row


   .. py:method:: _get_decarbonization(self, intensity_benchmark_row: pandas.Series) -> pandas.Series

      Overrides subclass method
      returns a Series with the decarbonization path for a benchmark.
      :param: A Series with a company's intensity benchmarks per calendar year per row
      :return: A pd.Series with a company's decarbonisation paths per calendar year per row


   .. py:method:: _convert_benchmark_to_series(self, benchmark: ITR.interfaces.IBenchmark) -> pandas.Series

      extracts the company projected intensities or targets for a given scope
      :param scope: a scope
      :return: pd.Series


   .. py:method:: _get_projected_intensities(self, scope: ITR.interfaces.EScope = EScope.S1S2) -> pandas.DataFrame

      Converts IEmissionIntensityBenchmarkScopes into dataframe for a scope
      :param scope: a scope
      :return: pd.DataFrame


   .. py:method:: _get_intensity_benchmarks(self, company_sector_region_info: pandas.DataFrame, scope: ITR.interfaces.EScope = EScope.S1S2) -> pandas.DataFrame

      Overrides subclass method
      returns a Dataframe with production benchmarks per company_id given a region and sector.
      :param company_sector_region_info: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :param scope: a scope
      :return: A DataFrame with company and intensity benchmarks per calendar year per row



.. py:class:: BaseCompanyDataProvider(companies: List[ITR.interfaces.ICompanyData], column_config: Type[ITR.configs.ColumnsConfig] = ColumnsConfig, tempscore_config: Type[ITR.configs.TemperatureScoreConfig] = TemperatureScoreConfig, projection_controls: ITR.interfaces.ProjectionControls = ProjectionControls())

   Bases: :py:obj:`ITR.data.data_providers.CompanyDataProvider`

   Data provider skeleton for JSON files parsed by the fastAPI json encoder. This class serves primarily for connecting
   to the ITR tool via API.

   :param companies: A list of ICompanyData objects that each contain fundamental company data
   :param column_config: An optional ColumnsConfig object containing relevant variable names
   :param tempscore_config: An optional TemperatureScoreConfig object containing temperature scoring settings

   .. py:method:: _validate_projected_trajectories(self, companies: List[ITR.interfaces.ICompanyData]) -> List[ITR.interfaces.ICompanyData]


   .. py:method:: _convert_projections_to_series(self, company: ITR.interfaces.ICompanyData, feature: str, scope: ITR.interfaces.EScope = EScope.S1S2) -> pandas.Series

      extracts the company projected intensities or targets for a given scope
      :param feature: PROJECTED_TRAJECTORIES or PROJECTED_TARGETS (both are intensities)
      :param scope: a scope
      :return: pd.Series


   .. py:method:: _calculate_target_projections(self, production_bm: BaseProviderProductionBenchmark)

      We cannot calculate target projections until after we have loaded benchmark data.
      We do so when companies are associated with benchmarks, in the DataWarehouse construction

      :param production_bm: A Production Benchmark (multi-sector, single-scope, 2020-2050)


   .. py:method:: _get_company_intensity_at_year(self, year: int, company_ids: List[str]) -> pandas.Series

      Returns projected intensities for a given set of companies and year
      :param year: calendar year
      :param company_ids: List of company ids
      :return: pd.Series with intensities for given company ids


   .. py:method:: get_company_data(self, company_ids: List[str]) -> List[ITR.interfaces.ICompanyData]

      Get all relevant data for a list of company ids. This method should return a list of ICompanyData
      instances.

      :param company_ids: A list of company IDs (ISINs)
      :return: A list containing the company data


   .. py:method:: get_value(self, company_ids: List[str], variable_name: str) -> pandas.Series

      Gets the value of a variable for a list of companies ids
      :param company_ids: list of company ids
      :param variable_name: variable name of the projected feature
      :return: series of values


   .. py:method:: get_company_intensity_and_production_at_base_year(self, company_ids: List[str]) -> pandas.DataFrame

      overrides subclass method
      :param: company_ids: list of company ids
      :return: DataFrame the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.PRODUCTION_METRIC, ColumnsConfig.GHG_SCOPE12, ColumnsConfig.BASE_EI,
      ColumnsConfig.SECTOR and ColumnsConfig.REGION


   .. py:method:: get_company_fundamentals(self, company_ids: List[str]) -> pandas.DataFrame

      :param company_ids: A list of company IDs
      :return: A pandas DataFrame with company fundamental info per company (company_id is a column)


   .. py:method:: get_company_projected_trajectories(self, company_ids: List[str]) -> pandas.DataFrame

      :param company_ids: A list of company IDs
      :return: A pandas DataFrame with projected intensity trajectories per company, indexed by company_id


   .. py:method:: get_company_projected_targets(self, company_ids: List[str]) -> pandas.DataFrame

      :param company_ids: A list of company IDs
      :return: A pandas DataFrame with projected intensity targets per company, indexed by company_id



.. py:class:: EITrajectoryProjector(projection_controls: ITR.interfaces.ProjectionControls = ProjectionControls())

   Bases: :py:obj:`object`

   This class projects emissions intensities on company level based on historic data on:
   - A company's emission history (in t CO2)
   - A company's production history (units depend on industry, e.g. TWh for electricity)

   .. py:method:: project_ei_trajectories(self, companies: List[ITR.interfaces.ICompanyData]) -> List[ITR.interfaces.ICompanyData]


   .. py:method:: _extract_historic_data(self, companies: List[ITR.interfaces.ICompanyData]) -> pandas.DataFrame


   .. py:method:: _historic_productions_to_dict(self, id: str, productions: List[ITR.interfaces.IProductionRealization]) -> Dict[str, str]


   .. py:method:: _historic_emissions_to_dicts(self, id: str, emissions_scopes: ITR.interfaces.IHistoricEmissionsScopes) -> List[Dict[str, str]]


   .. py:method:: _historic_ei_to_dicts(self, id: str, intensities_scopes: ITR.interfaces.IHistoricEIScopes) -> List[Dict[str, str]]


   .. py:method:: _compute_missing_historic_ei(self, companies, historic_data)


   .. py:method:: _add_projections_to_companies(self, companies: List[ITR.interfaces.ICompanyData], extrapolations: pandas.DataFrame)


   .. py:method:: _standardize(self, intensities: pandas.DataFrame) -> pandas.DataFrame


   .. py:method:: _winsorize(self, historic_intensities: pandas.DataFrame) -> pandas.DataFrame


   .. py:method:: _interpolate(self, historic_intensities: pandas.DataFrame) -> pandas.DataFrame


   .. py:method:: _get_trends(self, intensities: pandas.DataFrame)


   .. py:method:: _extrapolate(self, trends: pandas.DataFrame, projection_years: range, historic_data: pandas.DataFrame) -> pandas.DataFrame


   .. py:method:: _year_on_year_ratio(self, arr: numpy.ndarray) -> float



.. py:class:: EITargetProjector

   Bases: :py:obj:`object`

   This class projects emissions intensities from a company's targets and historic data. Targets are specified per
   scope in terms of either emissions or emission intensity reduction. Interpolation between last known historic data
   and (a) target(s) is CAGR-based.

   Remember that pd.Series are always well-behaved with pint[] quantities.  pd.DataFrame columns are well-behaved,
   but data across columns is not always well-behaved.  We therefore make this function assume we are projecting targets
   for a specific company, in a specific sector.  If we want to project targets for multiple sectors, we have to call it multiple times.
   This function doesn't need to know what sector it's computing for...only tha there is only one such, for however many scopes.

   .. py:method:: _normalize_scope_targets(self, scope_targets)


   .. py:method:: project_ei_targets(self, company: ITR.interfaces.ICompanyData, production_bm: pandas.Series) -> ITR.interfaces.ICompanyEIProjectionsScopes

      Input:
      @targets: a list of a company's targets
      @historic_data: a company's historic production, emissions, and emission intensities realizations per scope
      @production_bm: company's production projection computed from region-sector benchmark growth rates

      If the company has no target or the target can't be processed, then the output the emission database, unprocessed


   .. py:method:: _compute_CAGR(self, first, last, period)

      Input:
      @first: the value of the first datapoint in the Calculation (most recent actual datapoint)
      @last: last value (value at future target year)
      @period: number of periods in the CAGR



