:py:mod:`ITR.data`
==================

.. py:module:: ITR.data

.. autoapi-nested-parse::

   This module contains classes that create connections to data providers.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base_providers/index.rst
   data_providers/index.rst
   data_warehouse/index.rst
   excel/index.rst
   osc_units/index.rst
   template/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   ITR.data.CompanyDataProvider
   ITR.data.ExcelProviderCompany




Attributes
~~~~~~~~~~

.. autoapisummary::

   ITR.data.ureg


.. py:data:: ureg
   

   

.. py:class:: CompanyDataProvider(**kwargs)

   Bases: :py:obj:`abc.ABC`

   Company data provider super class.
   Data container for company specific data. It expects both Fundamental (e.g. Company revenue, marktetcap etc) and
   emission and target data per company.

   Initialized CompanyDataProvider is required when setting up a data warehouse instance.

   .. py:method:: get_company_data(company_ids: List[str]) -> List[ITR.interfaces.ICompanyData]
      :abstractmethod:

      Get all relevant data for a list of company ids (ISIN). This method should return a list of ICompanyData
      instances.

      :param company_ids: A list of company IDs (ISINs)
      :return: A list containing the company data


   .. py:method:: get_value(company_ids: List[str], variable_name: str) -> pandas.Series
      :abstractmethod:

      Gets the value of a variable for a list of companies idss
      :param company_ids: list of company ids
      :param variable_name: variable name of the projected feature
      :return: series of values


   .. py:method:: get_company_intensity_and_production_at_base_year(company_ids: List[str]) -> pandas.DataFrame
      :abstractmethod:

      Get the emission intensity and the production for a list of companies at the base year.
      :param: company_ids: list of company ids
      :return: DataFrame the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.GHG_S1S2, ColumnsConfig.BASE_EI, ColumnsConfig.SECTOR and
      ColumnsConfig.REGION


   .. py:method:: get_company_projected_trajectories(company_ids: List[str]) -> pandas.DataFrame
      :abstractmethod:

      Gets the emission intensities for a list of companies
      :param company_ids: list of company ids
      :return: dataframe of projected intensity trajectories for each company in company_ids


   .. py:method:: get_company_projected_targets(company_ids: List[str]) -> pandas.DataFrame
      :abstractmethod:

      Gets the projected targets for a list of companies
      :param company_ids: list of company ids
      :return: dataframe of projected intensity targets for each company in company_ids



.. py:class:: ExcelProviderCompany(excel_path: str, column_config: Type[ITR.configs.ColumnsConfig] = ColumnsConfig, tempscore_config: Type[ITR.configs.TemperatureScoreConfig] = TemperatureScoreConfig)

   Bases: :py:obj:`ITR.data.base_providers.BaseCompanyDataProvider`

   Data provider skeleton for CSV files. This class serves primarily for testing purposes only!

   :param excel_path: A path to the Excel file with the company data
   :param column_config: An optional ColumnsConfig object containing relevant variable names
   :param tempscore_config: An optional TemperatureScoreConfig object containing temperature scoring settings

   .. py:method:: _check_company_data(company_tabs: dict) -> None

      Checks if the company data excel contains the data in the right format

      :return: None


   .. py:method:: _convert_from_excel_data(excel_path: str) -> List[ITR.interfaces.ICompanyData]

      Converts the Excel template to list of ICompanyDta objects. All dataprovider features will be inhereted from
      Base
      :param excel_path: file path to excel file
      :return: List of ICompanyData objects


   .. py:method:: _convert_series_to_projections(projections: pandas.Series, ProjectionType: ITR.interfaces.BaseModel) -> [ITR.interfaces.IProjection]

      Converts a Pandas Series to a list of IProjection
      :param projections: Pandas Series with years as indices
      :return: List of IProjection objects


   .. py:method:: _company_df_to_model(df_fundamentals: pandas.DataFrame, df_targets: pandas.DataFrame, df_ei: pandas.DataFrame, df_historic: pandas.DataFrame) -> List[ITR.interfaces.ICompanyData]

      transforms target Dataframe into list of IDataProviderTarget instances

      :param df_fundamentals: pandas Dataframe with fundamental data
      :param df_targets: pandas Dataframe with targets
      :param df_ei: pandas Dataframe with emission intensities
      :return: A list containing the ICompanyData objects


   .. py:method:: _np_sum()


   .. py:method:: _get_projection(company_ids: List[str], projections: pandas.DataFrame, production_metric: pandas.DataFrame) -> pandas.DataFrame

      get the projected emission intensities for list of companies
      :param company_ids: list of company ids
      :param projections: Dataframe with listed projections per company
      :param production_metric: Dataframe with production_metric per company
      :return: series of projected emission intensities


   .. py:method:: _get_historic_data(company_ids: List[str], historic_data: pandas.DataFrame) -> pandas.DataFrame

      get the historic data for list of companies
      :param company_ids: list of company ids
      :param historic_data: Dataframe Productions, Emissions, and Emission Intensities mixed together
      :return: historic data with unit attributes added to yearly data on a per-element basis


   .. py:method:: _convert_historic_data(historic: pandas.DataFrame) -> ITR.interfaces.IHistoricData

      :param historic: historic production, emission and emission intensity data for a company
      :return: IHistoricData Pydantic object


   .. py:method:: _convert_to_historic_emissions(emissions: pandas.DataFrame) -> Optional[ITR.interfaces.IHistoricEmissionsScopes]

      :param historic: historic production, emission and emission intensity data for a company
      :param convert_unit: whether or not to convert the units of measure
      :return: List of historic emissions per scope, or None if no data are provided


   .. py:method:: _convert_to_historic_productions(productions: pandas.DataFrame) -> Optional[List[ITR.interfaces.IProductionRealization]]

      :param historic: historic production, emission and emission intensity data for a company
      :return: A list containing historic productions, or None if no data are provided


   .. py:method:: _convert_to_historic_ei(intensities: pandas.DataFrame) -> Optional[ITR.interfaces.IHistoricEIScopes]

      :param historic: historic production, emission and emission intensity data for a company
      :return: A list of historic emission intensities per scope, or None if no data are provided



