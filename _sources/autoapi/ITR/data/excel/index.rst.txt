:py:mod:`ITR.data.excel`
========================

.. py:module:: ITR.data.excel


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ITR.data.excel.ExcelProviderProductionBenchmark
   ITR.data.excel.ExcelProviderIntensityBenchmark
   ITR.data.excel.ExcelProviderCompany



Functions
~~~~~~~~~

.. autoapisummary::

   ITR.data.excel.convert_dimensionless_benchmark_excel_to_model
   ITR.data.excel.convert_intensity_benchmark_excel_to_model



Attributes
~~~~~~~~~~

.. autoapisummary::

   ITR.data.excel.logger
   ITR.data.excel.ureg
   ITR.data.excel.Q_
   ITR.data.excel.sector_to_production_metric
   ITR.data.excel.sector_to_intensity_metric


.. py:data:: logger
   

   

.. py:data:: ureg
   

   

.. py:data:: Q_
   

   

.. py:data:: sector_to_production_metric
   

   

.. py:data:: sector_to_intensity_metric
   

   

.. py:function:: convert_dimensionless_benchmark_excel_to_model(df_excel: dict, sheetname: str, column_name_region: str, column_name_sector: str) -> ITR.interfaces.IBenchmarks

   Converts excel into IBenchmarks
   :param df_excel: dictionary with a pd.DataFrame for each key representing a sheet of an Excel file
   :param sheetname: name of Excel file sheet to convert
   :param column_name_region: name of region
   :param column_name_sector: name of sector
   :return: IBenchmarks instance (list of IBenchmark)


.. py:function:: convert_intensity_benchmark_excel_to_model(df_excel: pandas.DataFrame, sheetname: str, column_name_region: str, column_name_sector: str) -> ITR.interfaces.IBenchmarks

   Converts excel into IBenchmarks
   :param excal_path: file path to excel
   :return: IBenchmarks instance (list of IBenchmark)


.. py:class:: ExcelProviderProductionBenchmark(excel_path: str, column_config: Type[ITR.configs.ColumnsConfig] = ColumnsConfig, tempscore_config: Type[ITR.configs.TemperatureScoreConfig] = TemperatureScoreConfig)

   Bases: :py:obj:`ITR.data.base_providers.BaseProviderProductionBenchmark`

   .. py:method:: _get_projected_production(self, scope: ITR.interfaces.EScope = EScope.S1S2) -> pandas.DataFrame

      interface from excel file and internally used DataFrame
      :param scope:
      :return:



.. py:class:: ExcelProviderIntensityBenchmark(excel_path: str, benchmark_temperature: pint.Quantity[delta_degC], benchmark_global_budget: pint.Quantity[CO2], is_AFOLU_included: bool, column_config: Type[ITR.configs.ColumnsConfig] = ColumnsConfig, tempscore_config: Type[ITR.configs.TemperatureScoreConfig] = TemperatureScoreConfig)

   Bases: :py:obj:`ITR.data.base_providers.BaseProviderIntensityBenchmark`


.. py:class:: ExcelProviderCompany(excel_path: str, column_config: Type[ITR.configs.ColumnsConfig] = ColumnsConfig, tempscore_config: Type[ITR.configs.TemperatureScoreConfig] = TemperatureScoreConfig)

   Bases: :py:obj:`ITR.data.base_providers.BaseCompanyDataProvider`

   Data provider skeleton for CSV files. This class serves primarily for testing purposes only!

   :param excel_path: A path to the Excel file with the company data
   :param column_config: An optional ColumnsConfig object containing relevant variable names
   :param tempscore_config: An optional TemperatureScoreConfig object containing temperature scoring settings

   .. py:method:: _check_company_data(self, company_tabs: dict) -> None

      Checks if the company data excel contains the data in the right format

      :return: None


   .. py:method:: _convert_from_excel_data(self, excel_path: str) -> List[ITR.interfaces.ICompanyData]

      Converts the Excel template to list of ICompanyDta objects. All dataprovider features will be inhereted from
      Base
      :param excel_path: file path to excel file
      :return: List of ICompanyData objects


   .. py:method:: _convert_series_to_projections(self, projections: pandas.Series, ProjectionType: ITR.interfaces.BaseModel) -> [ITR.interfaces.IProjection]

      Converts a Pandas Series to a list of IProjection
      :param projections: Pandas Series with years as indices
      :return: List of IProjection objects


   .. py:method:: _company_df_to_model(self, df_fundamentals: pandas.DataFrame, df_targets: pandas.DataFrame, df_ei: pandas.DataFrame, df_historic: pandas.DataFrame) -> List[ITR.interfaces.ICompanyData]

      transforms target Dataframe into list of IDataProviderTarget instances

      :param df_fundamentals: pandas Dataframe with fundamental data
      :param df_targets: pandas Dataframe with targets
      :param df_ei: pandas Dataframe with emission intensities
      :return: A list containing the ICompanyData objects


   .. py:method:: _np_sum(g)


   .. py:method:: _get_projection(self, company_ids: List[str], projections: pandas.DataFrame, production_metric: pandas.DataFrame) -> pandas.DataFrame

      get the projected emission intensities for list of companies
      :param company_ids: list of company ids
      :param projections: Dataframe with listed projections per company
      :param production_metric: Dataframe with production_metric per company
      :return: series of projected emission intensities


   .. py:method:: _get_historic_data(self, company_ids: List[str], historic_data: pandas.DataFrame) -> pandas.DataFrame

      get the historic data for list of companies
      :param company_ids: list of company ids
      :param historic_data: Dataframe Productions, Emissions, and Emission Intensities mixed together
      :return: historic data with unit attributes added to yearly data on a per-element basis


   .. py:method:: _convert_historic_data(self, historic: pandas.DataFrame) -> ITR.interfaces.IHistoricData

      :param historic: historic production, emission and emission intensity data for a company
      :return: IHistoricData Pydantic object


   .. py:method:: _convert_to_historic_emissions(self, emissions: pandas.DataFrame) -> Optional[ITR.interfaces.IHistoricEmissionsScopes]

      :param historic: historic production, emission and emission intensity data for a company
      :param convert_unit: whether or not to convert the units of measure
      :return: List of historic emissions per scope, or None if no data are provided


   .. py:method:: _convert_to_historic_productions(self, productions: pandas.DataFrame) -> Optional[List[ITR.interfaces.IProductionRealization]]

      :param historic: historic production, emission and emission intensity data for a company
      :return: A list containing historic productions, or None if no data are provided


   .. py:method:: _convert_to_historic_ei(self, intensities: pandas.DataFrame) -> Optional[ITR.interfaces.IHistoricEIScopes]

      :param historic: historic production, emission and emission intensity data for a company
      :return: A list of historic emission intensities per scope, or None if no data are provided



